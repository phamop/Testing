trigger:
  branches:
    include:
      - develop

pool:
  vmImage: 'ubuntu-latest'

parameters:
- name: environment
  type: string
  default: 'dev'
  values:
    - dev
    - prod

variables:
  AzureSubscription: 'Your-Service-Connection-Name-Here' # Replace with actual service connection name
  # Define these below or link to a variable group if needed
  aksResourceGroup: 'your-aks-resource-group'
  aksClusterName: 'your-aks-cluster-name'
  namespace: 'your-k8s-namespace'
  helmChartPath: 'your/chart/path'
  releaseName: 'grafana-release'
  AzureTenantId: 'your-tenant-id'
  AzureSubscriptionId: 'your-subscription-id'
  azureMonitorWorkspaceResourceId: 'your-monitor-resource-id'
  ServicePrincipalClientId: 'your-client-id'
  ServicePrincipalClientSecret: 'your-client-secret'
  keyVaultName: 'your-keyvault-name'

stages:
- stage: DeployGrafana
  displayName: 'Deploy Grafana via Helm'
  jobs:
  - job: HelmDeployment
    displayName: 'Helm Chart Deployment'
    steps:
    - checkout: self

    - script: |
        sudo apt-get update
        sudo apt-get install -y zip unzip
        curl -LO https://dl.k8s.io/release/v1.32.0/bin/linux/amd64/kubectl
        sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
      displayName: 'Install Tools'

    - task: HelmInstaller@1
      displayName: 'Install Helm'
      inputs:
        helmVersionToInstall: '3.9.0'

    - task: AzureCLI@2
      displayName: 'Login and configure kubectl'
      inputs:
        connectedServiceNameARM: $(AzureSubscription)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az aks get-credentials --resource-group $(aksResourceGroup) --name $(aksClusterName) --admin --overwrite-existing
          kubectl config use-context $(aksClusterName)

    - task: AzureCLI@2
      displayName: 'Apply SecretProviderClass'
      inputs:
        connectedServiceNameARM: $(AzureSubscription)
        addSpnToEnvironment: true
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          cat <<EOF | kubectl apply -f -
          apiVersion: secrets-store.csi.x-k8s.io/v1
          kind: SecretProviderClass
          metadata:
            name: azure-kv
            namespace: $(namespace)
          spec:
            provider: azure
            parameters:
              keyvaultName: "$(keyVaultName)"
              objects: |
                array:
                  - |
                    objectName: grafana-admin-user
                    objectType: secret
                  - |
                    objectName: grafana-admin-password
                    objectType: secret
              tenantId: "$(AzureTenantId)"
            secretObjects:
            - secretName: grafana-secrets
              type: Opaque
              data:
              - objectName: grafana-admin-user
                key: admin-user
              - objectName: grafana-admin-password
                key: admin-password
          EOF

    - task: HelmDeploy@0
      displayName: 'Deploy Helm Chart'
      inputs:
        azureSubscription: $(AzureSubscription)
        kubernetesCluster: $(aksClusterName)
        resourceGroup: $(aksResourceGroup)
        namespace: $(namespace)
        chartPath: $(helmChartPath)
        releaseName: $(releaseName)
        valueFile: $(helmChartPath)/values.yaml
        overrideValues: |
          azure.tenantId=$(AzureTenantId)
          azure.subscriptionId=$(AzureSubscriptionId)
          azure.resourceGroup=$(aksResourceGroup)
          azure.azureMonitorWorkspaceResourceId=$(azureMonitorWorkspaceResourceId)
          azure.servicePrincipalClientId=$(ServicePrincipalClientId)
          azure.servicePrincipalClientSecret=$(ServicePrincipalClientSecret)
          azure.keyVaultName=$(keyVaultName)

    - task: Kubernetes@1
      displayName: 'Check Grafana Pod Status'
      inputs:
        command: 'get'
        type: 'pod'
        connectionType: 'Azure Resource Manager'
        azureSubscription: $(AzureSubscription)
        kubernetesCluster: $(aksClusterName)
        azureResourceGroup: $(aksResourceGroup)
        namespace: $(namespace)
        arguments: '-l app.kubernetes.io/name=$(releaseName)'
        outputFormat: 'wide'
